--@name midi parser
--@author Divran
--@client

--[[
if not bit then
    bit = {
        lshift = function(a,b)
            return a << b
        end,
        rshift = function(a,b)
            return a >> b
        end,
        band = function(a,b)
            return a & b
        end
    }
end
]]

function parseMIDI( str, forced_instrument )
    -- much help from https://github.com/nguyenkien07/parse-midi-file-lua/blob/master/midi.lua
    local byte = string.byte
    local sub = string.sub
    local filepos = 1
    local band = bit.band
    local lshift = bit.lshift
    local rshift = bit.rshift
    local bor = bit.bor
    local parsed = {}

    local parse = {
        [4] = function( s )
            return  16777216*byte(sub(s,1)) +
                    65536*byte(sub(s,2)) +
                    256*byte(sub(s,3)) + 
                    byte(sub(s,4))
        end,
        [3] = function( s )
            return  65536*byte(sub(s,1)) +
                    256*byte(sub(s,2)) + 
                    byte(sub(s,3))
        end,
        [2] = function( s )
            return 256*byte(sub(s,1))+
                    byte(sub(s,2))
        end,
    }
    
    -- try to check if one channel plays 
    -- more than one note at the same time
    local instrument_amt_playing = {}
    local channel_instruments = {}
    local tempo_ms = 0
    local function playSound(event)
        local instrument = event.instrument
        if not instrument then instrument = channel_instruments[event.channel] end
        if not instrument then return end
        
        instrument_amt_playing[instrument] = 
            (instrument_amt_playing[instrument] or 0) + 1
            
        parsed.instruments[instrument] = math.max(
            parsed.instruments[instrument] or 0,
            instrument_amt_playing[instrument]
        )
    end
    local function stopSound(event)
        local instrument = event.instrument
        if not instrument then instrument = channel_instruments[event.channel] end
        if not instrument then return end
        
        instrument_amt_playing[instrument] = 
            (instrument_amt_playing[instrument] or 0) - 1
            
        if instrument_amt_playing[instrument] < 0 then
            instrument_amt_playing[instrument] = 0
        end
    end

    local function getInstrumentFilePath(event)
        if forced_instrument then
            event.instrument = forced_instrument
        else
            event.instrument = getMIDISound(
                event.channel, -- channel
                event.param1 -- program or key
            )
        end
        
        if event.instrument then
            parsed.instruments[event.instrument] = 1
        else
            print("unable to find instrument for",event.channel,event.param1)
        end
    end

    local function get( str, len, doparse )
        local got = sub( str, filepos, filepos + (len or 1) - 1 )
        --print("got:",filepos,filepos + (len or 0),got)
        filepos = filepos + (len or 1)

        if doparse then got = parse[len]( got ) end

        return got
    end

    local function variableLengthNumber(s)
        local ret = 0
        repeat
            local current_num = byte(get(s))
            ret = lshift(ret,7) + band(current_num,0x7F)
        until band(current_num,0x80) ~= 128
        return ret
    end

    if get(str,4) ~= "MThd" then
        error("Invalid MIDI file, MThd header missing")
    end
    
    coroutine.yield() -- initial yield, next will enter think hook


    -- get file headers
    local length = get(str,4,true)
    local format = get(str,2,true)
    local ntracks = get(str,2,true)
    local tickdiv = get(str,2,true)
    
    -- tempo calculator helper function
    local function tempo2ms( tempo )
        --return tempo/1000/parsed.ppqn
        --return 60000/parsed.ppqn/(tempo/1000)
        
        --[[
        local ticks_per_quarter = parsed.ppqn
        local s_per_quarter = tempo
        local s_per_tick = s_per_quarter / ticks_per_quater
        local seconds_per_tick = s_per_tick / 1000000
        ]]
        
        return (tempo / parsed.ppqn) / 1000
    end
    
    local tickmethod = band(tickdiv,0x4000)
    if tickmethod == 0 then -- metrical timing. bits 0-14 = pulses per quarter note, ppqn
        parsed.ppqn = band(tickdiv,0x3FFF)
        
        local tempo = 120000 -- default tempo of 120
        parsed.ms = tempo2ms(tempo)
        --print("Tempo timing",parsed.ms,"ppqn",parsed.ppqn)
    elseif tickmethod == 1 then -- absolute timing. bits 8-14 = frames per second. bits 0-7 = sub divisions per frame
        parsed.fps = rshift(band(tickdiv,0x7FFF),8)
        parsed.subdivisions = band(tickdiv,0xFF)
        parsed.ms = parsed.fps / parsed.subdivisions
        --print("Absolute timing",parsed.ms)
    end

    parsed.format = format
    parsed.instruments = {}
    parsed.tracks = {}
    parsed.accuracy_ms = timer.frametime() * 900 -- 90% of current fps in miliseconds
    parsed.average_ms = parsed.ms
    parsed.smallest_deltatime = 9999999
    parsed.playtime = 0
    
    local tempo_queue = {}

    -- check tracks
    local running = false
    while filepos < #str - 8 do
        local track_head = get(str,4)
        if track_head ~= "MTrk" then error("Invalid MIDI file, MTrk header missing") end

        local track_length = get(str,4,true)
        if track_length > #str then error("Invalid MIDI file, track length is larger than file length") end
        local track_end = filepos + track_length

        local track = {}
        local parsed_index = 1
        local playtime = 0
        local current_ms = parsed.ms
        local tempo_queue_index = 1

        -- decode this track
        while filepos < track_end - 1 do
            local deltatime = variableLengthNumber(str)
            local event = byte(get(str))
            
            parsed.accuracy_ms = parsed.accuracy_ms * 0.5 + (timer.frametime() * 900) * 0.5
            
            -- calculate playtime
            local tempo_queue_item = tempo_queue[tempo_queue_index]
            if tempo_queue_item then
                if playtime >= tempo_queue_item.processAt then
                    tempo_queue_index = tempo_queue_index + 1
                    current_ms = tempo_queue_item.new_ms
                end
            end
            playtime = playtime + current_ms * deltatime / 1000

            --print("filepos",filepos,str:sub(filepos,filepos+20))

            if event < 0xF0 then -- midi event
                --print("midi event")
                if band(event,255) > 127 then -- not running
                    running = event -- set for future possible running events
                else
                    if running == false then error("Invalid MIDI file, tried to use running even incorrectly") end
                    event = running
                    filepos = filepos - 1
                end

                local command = band(event,0xFF0)
                local channel = band(event,0xF)

                local e = {}
                e["deltatime"] = deltatime
                e["channel"] = channel
                e["param1"] = byte(get(str))

                if command == 0x80 then -- Note off
                    e["command"] = "note off"
                    e["param2"] = byte(get(str))
                    if e.channel == 9 then
                        getInstrumentFilePath(e)
                        --print("SETTING INSTRUMENT (c)",e.channel,e.instrument,e.param1)
                    end
                    stopSound(e)
                    
                    if deltatime > 0 then
                        parsed.smallest_deltatime = math.min(parsed.smallest_deltatime,deltatime)
                    end
                elseif command == 0x90 then -- Note on
                    e["command"] = "note on"
                    e["param2"] = byte(get(str))
                    if e.channel == 9 then
                        getInstrumentFilePath(e)
                        --print("SETTING INSTRUMENT (b)",e.channel,e.instrument,e.param1)
                    end
                    if e.param2 == 0 then
                        stopSound(e,current_time)
                    else
                        playSound(e,current_time)
                    end
                    
                    if deltatime > 0 then
                        parsed.smallest_deltatime = math.min(parsed.smallest_deltatime,deltatime)
                    end
                elseif command == 0xA0 then -- Polyphonic pressure
                    e["command"] = "polyphonic pressure"
                    e["param2"] = byte(get(str))
                elseif command == 0xB0 then -- Controller
                    e["command"] = "control change"
                    e["param2"] = byte(get(str))
                elseif command == 0xC0 then -- Program change
                    e["command"] = "program change"
                    if e.channel ~= 9 then
                        getInstrumentFilePath(e)
                        channel_instruments[e.channel] = e.instrument
                        print("SETTING INSTRUMENT (a)",e.channel,e.instrument,e.param1)
                    end
                elseif command == 0xD0 then -- Channel pressure
                    e["command"] = "channel pressure"
                elseif command == 0xE0 then -- Pitch bend
                    e["command"] = "pitch bend"
                    local param2 = byte(get(str))
                    e["param2"] = bor(lshift(param2,7),e.param1) --128 * param2 + e.param1 - 8192
                end

                track[parsed_index] = e
                parsed_index = parsed_index + 1
            elseif event == 0xFF then -- Meta event
                local command = byte(get(str))
                local length = variableLengthNumber(str)
                
                if command == 0x51 then -- Tempo
                    if length ~= 3 then error("Invalid MIDI file, expected meta event length of 3 in 'tempo' event") end
                    
                    if tickmethod == 0 then
                        local tempo = get(str,3,true)
                        
                        local new_ms = tempo2ms(tempo)
                    
                        track[parsed_index] = {
                            deltatime = deltatime,
                            command = "tempo",
                            param1 = tempo,
                            new_ms = new_ms
                        }
                        parsed_index = parsed_index + 1
                        
                        -- only take into account the changed timing when the jump isn't too large
                        -- because we assume the larger timings are in silent-ish periods of the song
                        if new_ms < parsed.average_ms * 2 then
                            parsed.average_ms = parsed.average_ms * 0.5 + new_ms * 0.5
                        end
                        
                        current_ms = new_ms
                        if #tempo_queue == 0 then
                            tempo_queue[1] = {
                                processAt=playtime,
                                new_ms=new_ms
                            }
                        else
                            for i=#tempo_queue,1,-1 do
                                if tempo_queue[i].processAt > playtime then
                                    table.insert(tempo_queue,i,{
                                        processAt=playtime,
                                        new_ms=new_ms
                                    })
                                end
                            end
                        end
                    else
                        get(str,3) -- read and forget data to move filepos
                    end
                elseif command == 0x2F then -- End of track
                    if length ~= 0 then error("Invalid MIDI file, expected meta event length of 0 in 'end of track' event") end
                    
                    track[parsed_index] = {
                        deltatime = deltatime,
                        command = "end of track"
                    }
                    parsed_index = parsed_index + 1
                else
                    get(str,length) -- read and forget data to move filepos
                end
                

                --[[
                -- code to get track name and instrument name etc (unused)
                local e = {}
                e["deltatime"] = deltatime

                if command == 3 then -- track name
                    e["command"] = "track name"
                    e["param1"] = str:get(length)
                elseif command == 4 then -- instrument name
                    e["command"] = "instrument name"
                    e["param1"] = str:get(length)
                else
                    local junk = str:get(length) -- read and forget data to move filepos
                end
                ]]
            elseif event == 0xF0 or event == 0xF7 then -- SysEx event
                local length = variableLengthNumber(str)
                get(str,length) -- read and forget data to move filepos
                -- ignore SysEx events
            elseif event == 0xF2 then get(str,3) -- song_position
            elseif event == 0xF3 then get(str,2) -- song_select
            --elseif event == 0xF6 then -- tune_request
            elseif event > 0xF0 then get(str,2) -- unknown event
            else
                error("Invalid MIDI file, unknown event")
            end
            coroutine.yield() -- yield once after each event
        end

        -- override filepos with correct position
        filepos = track_end
        parsed.tracks[#parsed.tracks+1] = track
        
        if format == 0 or format == 2 then
            parsed.playtime = parsed.playtime + playtime
        else
            parsed.playtime = math.max(parsed.playtime,playtime)
        end
        
        coroutine.yield() -- yield once after each track
    end

    return parsed
end